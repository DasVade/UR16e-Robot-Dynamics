function q_accel = robot_forwarddynamics(q, q_dot, F_end, tau)
    % 输入参数：
    % q: 关节角度 (6x1)
    % q_dot: 关节速度 (6x1)
    % F_end: 末端力/力矩 (6x1)
    % tau: 驱动力矩 (6x1)
    % 输出：关节加速度 (6x1)

    masses = [7.369; 10.450; 4.321; 2.180; 2.033; 0.907];
    g = 9.81; % 重力加速度，假设-z方向

    I_links = zeros(3, 3, 6); % 初始化 3×3×6 数组

    %惯性矩阵
    I_links(:, :, 1) = [0.029819260655624295, 0, 0;
                        0, 0.029819260655624295, 0;
                        0, 0, 0.020725312499999995];
    
    I_links(:, :, 2) = [0.21399985623335657, 0, 0;
                        0, 0.21399985623335657, 0;
                        0, 0, 0.029390624999999997];
    
    I_links(:, :, 3) = [0.052743185152717496, 0, 0;
                        0, 0.052743185152717496, 0;
                        0, 0, 0.012152812499999997];
    
    I_links(:, :, 4) = [0.0056816227273499996, 0, 0;
                        0, 0.0056816227273499996, 0;
                        0, 0, 0.00613125];
    
    I_links(:, :, 5) = [0.0052985041305975, 0, 0;
                        0, 0.0052985041305975, 0;
                        0, 0, 0.0057178125];
    
    I_links(:, :, 6) = [0.0006481268240825001, 0, 0;
                        0, 0.0006481268240825001, 0;
                        0, 0, 0.0009183374999999999];
    
    % 计算质量矩阵
    M = compute_mass_matrix(q, masses,I_links);
    
    % 计算科氏力矩阵
    C = compute_coriolis(q,masses,q_dot,I_links);
    
    % 计算重力项
    G = compute_gravity(q, masses, g);
    
    % 计算末端力的关节力矩
    J=compute_jacobian_end(q);
    JtF = J' * F_end;
    
    % 求解加速度
    q_accel = M \ (tau - C*q_dot - G + JtF);
end
